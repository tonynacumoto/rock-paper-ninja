{
  "address": "0x266cC078750D93FDB44EAb1035309F085A43C876",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "EscrowCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "EscrowFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "EscrowResolved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "createEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "escrows",
      "outputs": [
        {
          "internalType": "address",
          "name": "user1",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "string1",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "filled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "escrowId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "fillEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEscrowId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaefde4d005578976e515660813c7f55c95160a0076e1a77d5f6e2e68c68d84d9",
  "receipt": {
    "to": null,
    "from": "0x4BD3D896cF186347b37cECE94967aa9A9f84c2aE",
    "contractAddress": "0x266cC078750D93FDB44EAb1035309F085A43C876",
    "transactionIndex": 30,
    "gasUsed": "777380",
    "logsBloom": "0x
    "blockHash": "0x4fb1036f3e7288155985b7bbe5ffa109138772c6e2b9a854d88af031968f7081",
    "transactionHash": "0xaefde4d005578976e515660813c7f55c95160a0076e1a77d5f6e2e68c68d84d9",
    "logs": [],
    "blockNumber": 5997160,
    "cumulativeGasUsed": "8642257",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x17829D7F8bD71aC3f63F034eb31f645ad2409fA8",
    "0x1EC500955B17b072e094d483d06560927b46C9B1",
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "6ead9e910222b0187227208c4f985b98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"EscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"EscrowFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"EscrowResolved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"createEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"string1\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"filled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"escrowId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"fillEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEscrowId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EscrowContract.sol\":\"EscrowContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/EscrowContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract EscrowContract {\\n\\tERC20 public token;\\n\\taddress public feeAccount;\\n\\tuint256 public feePercent; // Represented as a percentage, e.g., 10 for 10%\\n\\n\\tstruct Escrow {\\n\\t\\taddress user1;\\n\\t\\tstring string1;\\n\\t\\tuint256 amount;\\n\\t\\tbool filled;\\n\\t}\\n\\n\\tmapping(uint256 => Escrow) public escrows;\\n\\tuint256 public nextEscrowId;\\n\\n\\tevent EscrowCreated(\\n\\t\\tuint256 indexed escrowId,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 amount,\\n\\t\\tstring str\\n\\t);\\n\\tevent EscrowFilled(\\n\\t\\tuint256 indexed escrowId,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 amount,\\n\\t\\tstring str\\n\\t);\\n\\tevent EscrowResolved(\\n\\t\\tuint256 indexed escrowId,\\n\\t\\taddress winner,\\n\\t\\tuint256 amount,\\n\\t\\taddress feeRecipient,\\n\\t\\tuint256 feeAmount\\n\\t);\\n\\n\\tconstructor(address _token, address _feeAccount, uint256 _feePercent) {\\n\\t\\trequire(_feePercent <= 100, \\\"Fee percent cannot be more than 100\\\");\\n\\t\\ttoken = ERC20(_token);\\n\\t\\tfeeAccount = _feeAccount;\\n\\t\\tfeePercent = _feePercent;\\n\\t}\\n\\n\\tfunction createEscrow(uint256 amount, string memory str) external {\\n\\t\\trequire(amount > 0, \\\"Amount must be greater than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\ttoken.allowance(msg.sender, address(this)) > (amount * 2),\\n\\t\\t\\t\\\"Token must have allowance over stake amount\\\"\\n\\t\\t);\\n\\n\\t\\tescrows[nextEscrowId] = Escrow({\\n\\t\\t\\tuser1: msg.sender,\\n\\t\\t\\tstring1: str,\\n\\t\\t\\tamount: amount,\\n\\t\\t\\tfilled: false\\n\\t\\t});\\n\\n\\t\\temit EscrowCreated(nextEscrowId, msg.sender, amount, str);\\n\\t\\tnextEscrowId++;\\n\\t}\\n\\n\\tfunction fillEscrow(uint256 escrowId, string memory str) external {\\n\\t\\tEscrow storage escrow = escrows[escrowId];\\n\\t\\trequire(!escrow.filled, \\\"Escrow already filled\\\");\\n\\n\\t\\tuint256 totalAmount = escrow.amount * 2;\\n\\t\\tuint256 feeAmount = (totalAmount * feePercent) / 100;\\n\\t\\tuint256 winnerAmount = escrow.amount - feeAmount;\\n\\n\\t\\trequire(\\n\\t\\t\\ttoken.allowance(msg.sender, address(this)) > totalAmount,\\n\\t\\t\\t\\\"Token must have allowance over stake amount\\\"\\n\\t\\t);\\n\\n\\t\\t// logic for determining winner\\n\\t\\t// would be great to compare encrypted data\\n\\t\\t// will most likely be done in LIT\\n\\t\\t// placeholder for now compares string length\\n\\t\\taddress winner = bytes(str).length >= bytes(escrow.string1).length\\n\\t\\t\\t? msg.sender\\n\\t\\t\\t: escrow.user1;\\n\\n\\t\\taddress loser = bytes(str).length >= bytes(escrow.string1).length\\n\\t\\t\\t? escrow.user1\\n\\t\\t\\t: msg.sender;\\n\\n\\t\\trequire(\\n\\t\\t\\ttoken.transferFrom(loser, feeAccount, feeAmount),\\n\\t\\t\\t\\\"Fee transfer to fee account failed\\\"\\n\\t\\t);\\n\\t\\t// require(token.transfer(winner, winnerAmount), \\\"Winner transfer failed\\\");\\n\\t\\trequire(\\n\\t\\t\\ttoken.transferFrom(loser, winner, winnerAmount),\\n\\t\\t\\t\\\"Token transfer to winner failed\\\"\\n\\t\\t);\\n\\t\\tescrow.filled = true;\\n\\t\\temit EscrowResolved(\\n\\t\\t\\tescrowId,\\n\\t\\t\\twinner,\\n\\t\\t\\twinnerAmount,\\n\\t\\t\\tfeeAccount,\\n\\t\\t\\tfeeAmount\\n\\t\\t);\\n\\t\\temit EscrowFilled(escrowId, msg.sender, escrow.amount, str);\\n\\t}\\n}\\n\",\"keccak256\":\"0x588b481788357766578f8d7c99c85feb8d09c1171407359beb01409276f707ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610cfb380380610cfb83398101604081905261002f916100e4565b60648111156100905760405162461bcd60e51b815260206004820152602360248201527f4665652070657263656e742063616e6e6f74206265206d6f7265207468616e2060448201526203130360ec1b606482015260840160405180910390fd5b600080546001600160a01b039485166001600160a01b0319918216179091556001805493909416921691909117909155600255610120565b80516001600160a01b03811681146100df57600080fd5b919050565b6000806000606084860312156100f957600080fd5b610102846100c8565b9250610110602085016100c8565b9150604084015190509250925092565b610bcc8061012f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637fd6f15c1161005b5780637fd6f15c146100ee578063815db6d41461010557806389cb29dd14610118578063fc0c546a1461012157600080fd5b8063012f52ee14610082578063138fcf92146100ae57806365e17c9d146100c3575b600080fd5b6100956100903660046107b2565b610134565b6040516100a59493929190610811565b60405180910390f35b6100c16100bc366004610863565b6101f3565b005b6001546100d6906001600160a01b031681565b6040516001600160a01b0390911681526020016100a5565b6100f760025481565b6040519081526020016100a5565b6100c1610113366004610863565b6103c1565b6100f760045481565b6000546100d6906001600160a01b031681565b600360205260009081526040902080546001820180546001600160a01b0390921692916101609061091e565b80601f016020809104026020016040519081016040528092919081815260200182805461018c9061091e565b80156101d95780601f106101ae576101008083540402835291602001916101d9565b820191906000526020600020905b8154815290600101906020018083116101bc57829003601f168201915b50505050600283015460039093015491929160ff16905084565b600082116102485760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064015b60405180910390fd5b61025382600261096e565b600054604051636eb1769f60e11b81523360048201523060248201526001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c5919061098b565b116102e25760405162461bcd60e51b815260040161023f906109a4565b60408051608081018252338152602080820184815282840186905260006060840181905260045481526003909252929020815181546001600160a01b0319166001600160a01b03909116178155915190919060018201906103439082610a3e565b5060408281015160028301556060909201516003909101805460ff191691151591909117905560045490513391907f70671f561c45e0ebd52b61b0b5b5bc90756cbe42cb834a12f813589a909d5562906103a09086908690610afe565b60405180910390a3600480549060006103b883610b1f565b91905055505050565b60008281526003602081905260409091209081015460ff161561041e5760405162461bcd60e51b8152602060048201526015602482015274115cd8dc9bddc8185b1c9958591e48199a5b1b1959605a1b604482015260640161023f565b600081600201546002610431919061096e565b90506000606460025483610445919061096e565b61044f9190610b38565b905060008184600201546104639190610b5a565b600054604051636eb1769f60e11b815233600482015230602482015291925084916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da919061098b565b116104f75760405162461bcd60e51b815260040161023f906109a4565b60008460010180546105089061091e565b9050865110156105225784546001600160a01b0316610524565b335b905060008560010180546105379061091e565b9050875110156105475733610553565b85546001600160a01b03165b6000546001546040516323b872dd60e01b81526001600160a01b03808516600483015291821660248201526044810188905292935016906323b872dd906064016020604051808303816000875af11580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d69190610b6d565b61062d5760405162461bcd60e51b815260206004820152602260248201527f466565207472616e7366657220746f20666565206163636f756e74206661696c604482015261195960f21b606482015260840161023f565b6000546040516323b872dd60e01b81526001600160a01b038381166004830152848116602483015260448201869052909116906323b872dd906064016020604051808303816000875af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610b6d565b6106f85760405162461bcd60e51b815260206004820152601f60248201527f546f6b656e207472616e7366657220746f2077696e6e6572206661696c656400604482015260640161023f565b60038601805460ff1916600190811790915554604080516001600160a01b03858116825260208201879052909216908201526060810185905288907f73c50d3023fc53af1a2473107e835ad604cb871ad9799ed2ccc0ff37e83d64b49060800160405180910390a2336001600160a01b0316887f09fbfd49ff4802190649c11352887d1e7ac60718641fb691cb83e65d97a4379988600201548a6040516107a0929190610afe565b60405180910390a35050505050505050565b6000602082840312156107c457600080fd5b5035919050565b6000815180845260005b818110156107f1576020818501810151868301820152016107d5565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0385168152608060208201819052600090610835908301866107cb565b60408301949094525090151560609091015292915050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561087657600080fd5b82359150602083013567ffffffffffffffff8082111561089557600080fd5b818501915085601f8301126108a957600080fd5b8135818111156108bb576108bb61084d565b604051601f8201601f19908116603f011681019083821181831017156108e3576108e361084d565b816040528281528860208487010111156108fc57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600181811c9082168061093257607f821691505b60208210810361095257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761098557610985610958565b92915050565b60006020828403121561099d57600080fd5b5051919050565b6020808252602b908201527f546f6b656e206d757374206861766520616c6c6f77616e6365206f766572207360408201526a1d185ad948185b5bdd5b9d60aa1b606082015260800190565b601f821115610a3957600081815260208120601f850160051c81016020861015610a165750805b601f850160051c820191505b81811015610a3557828155600101610a22565b5050505b505050565b815167ffffffffffffffff811115610a5857610a5861084d565b610a6c81610a66845461091e565b846109ef565b602080601f831160018114610aa15760008415610a895750858301515b600019600386901b1c1916600185901b178555610a35565b600085815260208120601f198616915b82811015610ad057888601518255948401946001909101908401610ab1565b5085821015610aee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000610b1760408301846107cb565b949350505050565b600060018201610b3157610b31610958565b5060010190565b600082610b5557634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561098557610985610958565b600060208284031215610b7f57600080fd5b81518015158114610b8f57600080fd5b939250505056fea2646970667358221220a196333b3daaa35124b60b4a5eb014d0861b6226f3cb9034999c61b8dfcd0ea964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637fd6f15c1161005b5780637fd6f15c146100ee578063815db6d41461010557806389cb29dd14610118578063fc0c546a1461012157600080fd5b8063012f52ee14610082578063138fcf92146100ae57806365e17c9d146100c3575b600080fd5b6100956100903660046107b2565b610134565b6040516100a59493929190610811565b60405180910390f35b6100c16100bc366004610863565b6101f3565b005b6001546100d6906001600160a01b031681565b6040516001600160a01b0390911681526020016100a5565b6100f760025481565b6040519081526020016100a5565b6100c1610113366004610863565b6103c1565b6100f760045481565b6000546100d6906001600160a01b031681565b600360205260009081526040902080546001820180546001600160a01b0390921692916101609061091e565b80601f016020809104026020016040519081016040528092919081815260200182805461018c9061091e565b80156101d95780601f106101ae576101008083540402835291602001916101d9565b820191906000526020600020905b8154815290600101906020018083116101bc57829003601f168201915b50505050600283015460039093015491929160ff16905084565b600082116102485760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064015b60405180910390fd5b61025382600261096e565b600054604051636eb1769f60e11b81523360048201523060248201526001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c5919061098b565b116102e25760405162461bcd60e51b815260040161023f906109a4565b60408051608081018252338152602080820184815282840186905260006060840181905260045481526003909252929020815181546001600160a01b0319166001600160a01b03909116178155915190919060018201906103439082610a3e565b5060408281015160028301556060909201516003909101805460ff191691151591909117905560045490513391907f70671f561c45e0ebd52b61b0b5b5bc90756cbe42cb834a12f813589a909d5562906103a09086908690610afe565b60405180910390a3600480549060006103b883610b1f565b91905055505050565b60008281526003602081905260409091209081015460ff161561041e5760405162461bcd60e51b8152602060048201526015602482015274115cd8dc9bddc8185b1c9958591e48199a5b1b1959605a1b604482015260640161023f565b600081600201546002610431919061096e565b90506000606460025483610445919061096e565b61044f9190610b38565b905060008184600201546104639190610b5a565b600054604051636eb1769f60e11b815233600482015230602482015291925084916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da919061098b565b116104f75760405162461bcd60e51b815260040161023f906109a4565b60008460010180546105089061091e565b9050865110156105225784546001600160a01b0316610524565b335b905060008560010180546105379061091e565b9050875110156105475733610553565b85546001600160a01b03165b6000546001546040516323b872dd60e01b81526001600160a01b03808516600483015291821660248201526044810188905292935016906323b872dd906064016020604051808303816000875af11580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d69190610b6d565b61062d5760405162461bcd60e51b815260206004820152602260248201527f466565207472616e7366657220746f20666565206163636f756e74206661696c604482015261195960f21b606482015260840161023f565b6000546040516323b872dd60e01b81526001600160a01b038381166004830152848116602483015260448201869052909116906323b872dd906064016020604051808303816000875af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610b6d565b6106f85760405162461bcd60e51b815260206004820152601f60248201527f546f6b656e207472616e7366657220746f2077696e6e6572206661696c656400604482015260640161023f565b60038601805460ff1916600190811790915554604080516001600160a01b03858116825260208201879052909216908201526060810185905288907f73c50d3023fc53af1a2473107e835ad604cb871ad9799ed2ccc0ff37e83d64b49060800160405180910390a2336001600160a01b0316887f09fbfd49ff4802190649c11352887d1e7ac60718641fb691cb83e65d97a4379988600201548a6040516107a0929190610afe565b60405180910390a35050505050505050565b6000602082840312156107c457600080fd5b5035919050565b6000815180845260005b818110156107f1576020818501810151868301820152016107d5565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0385168152608060208201819052600090610835908301866107cb565b60408301949094525090151560609091015292915050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561087657600080fd5b82359150602083013567ffffffffffffffff8082111561089557600080fd5b818501915085601f8301126108a957600080fd5b8135818111156108bb576108bb61084d565b604051601f8201601f19908116603f011681019083821181831017156108e3576108e361084d565b816040528281528860208487010111156108fc57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600181811c9082168061093257607f821691505b60208210810361095257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761098557610985610958565b92915050565b60006020828403121561099d57600080fd5b5051919050565b6020808252602b908201527f546f6b656e206d757374206861766520616c6c6f77616e6365206f766572207360408201526a1d185ad948185b5bdd5b9d60aa1b606082015260800190565b601f821115610a3957600081815260208120601f850160051c81016020861015610a165750805b601f850160051c820191505b81811015610a3557828155600101610a22565b5050505b505050565b815167ffffffffffffffff811115610a5857610a5861084d565b610a6c81610a66845461091e565b846109ef565b602080601f831160018114610aa15760008415610a895750858301515b600019600386901b1c1916600185901b178555610a35565b600085815260208120601f198616915b82811015610ad057888601518255948401946001909101908401610ab1565b5085821015610aee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000610b1760408301846107cb565b949350505050565b600060018201610b3157610b31610958565b5060010190565b600082610b5557634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561098557610985610958565b600060208284031215610b7f57600080fd5b81518015158114610b8f57600080fd5b939250505056fea2646970667358221220a196333b3daaa35124b60b4a5eb014d0861b6226f3cb9034999c61b8dfcd0ea964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 791,
        "contract": "contracts/EscrowContract.sol:EscrowContract",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20)651"
      },
      {
        "astId": 793,
        "contract": "contracts/EscrowContract.sol:EscrowContract",
        "label": "feeAccount",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 795,
        "contract": "contracts/EscrowContract.sol:EscrowContract",
        "label": "feePercent",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 809,
        "contract": "contracts/EscrowContract.sol:EscrowContract",
        "label": "escrows",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Escrow)804_storage)"
      },
      {
        "astId": 811,
        "contract": "contracts/EscrowContract.sol:EscrowContract",
        "label": "nextEscrowId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)651": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Escrow)804_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EscrowContract.Escrow)",
        "numberOfBytes": "32",
        "value": "t_struct(Escrow)804_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Escrow)804_storage": {
        "encoding": "inplace",
        "label": "struct EscrowContract.Escrow",
        "members": [
          {
            "astId": 797,
            "contract": "contracts/EscrowContract.sol:EscrowContract",
            "label": "user1",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 799,
            "contract": "contracts/EscrowContract.sol:EscrowContract",
            "label": "string1",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 801,
            "contract": "contracts/EscrowContract.sol:EscrowContract",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 803,
            "contract": "contracts/EscrowContract.sol:EscrowContract",
            "label": "filled",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}